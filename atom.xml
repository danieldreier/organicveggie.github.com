<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blind Squirrel]]></title>
  <link href="http://organicveggie.github.com/atom.xml" rel="self"/>
  <link href="http://organicveggie.github.com/"/>
  <updated>2013-03-12T15:35:20-07:00</updated>
  <id>http://organicveggie.github.com/</id>
  <author>
    <name><![CDATA[Sean Laurent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Distributed Graphite on EC2]]></title>
    <link href="http://organicveggie.github.com/blog/2012/05/28/distributed-graphite-on-ec2/"/>
    <updated>2012-05-28T14:20:00-07:00</updated>
    <id>http://organicveggie.github.com/blog/2012/05/28/distributed-graphite-on-ec2</id>
    <content type="html"><![CDATA[<p>Some time ago, we switched from <a href="http://www.cacti.net/">Cacti</a> to <a href="http://graphite.wikidot.com/">Graphite</a> for tracking and graphing system metrics. In our <a href="http://aws.amazon.com/ec2/">Amazon EC2 environment</a>, we frequently startup new servers and shut down old servers. While Cacti did a decent job, the amount of manual effort required to setup new graphs made it a challenge to use. Since Graphite simply tracks anything you throw at it and easily handles applying aggregate functions across multiple metrics, we found Graphite to be a much better fit with EC2 and our usage patterns. With a solid web interface and a variety of alternate front-ends and awesome dashboard tools like <a href="http://jondot.github.com/graphene/">Graphene</a>, we quickly fell in love with Graphite.</p>

<!-- more -->


<p>In fact, the more we utilized Graphite, the more data we wanted to push into Graphite. Systems metrics? Check. IO stats? Check. Apache stats? Check. MongoDB stats on a per collection basis? Why not! We quickly found ourselves with over 50,000 metrics and 500GB of data, all of which was getting updated every 15-30 seconds. Unfortunately, we also rapidly hit the limit of how much data we could record on a single instance. Even with a RAID-0 array of 8x EBS volumes on an m2.2xlarge instance, we couldn&#8217;t write the data fast enough. The poor instance began spending more than 50% of it&#8217;s time in I/O wait  and eventually became non-responsive. What we needed was a way to distribute the write load across multiple instances.</p>

<p>Fortunately, Graphite natively supports running in a distributed environment. A successful deployment consists of three key pieces:</p>

<ul>
<li>carbon-cache - This is what actually accepts and stores the metrics.</li>
<li>carbon-relay - Handles sharding the metrics and sending them to the appropriate carbon-cache instances.</li>
<li>webapp - Handles displaying the metrics. Must reside on every instance running a carbon-cache daemon. The webapp queries the other carbon-cache instances for data as necessary.</li>
</ul>


<p>Although there are many different ways you can setup your distributed Graphite environment, we chose to take a straight foward approach:</p>

<ul>
<li>One dedicated instance running carbon-relay that receives metrics from the various server instances, shards the metrics and forwards them on to the carbon-cache servers</li>
<li>Two dedicated instances running both carbon-cache and webapp.</li>
</ul>


<h2>Carbon Relay</h2>

<p>On the carbon-relay server, you need to configure two key files to indicate that this node should run as a relay: carbon.conf and relay.conf.</p>

<p><code>carbon.conf</code></p>

<div>
  <pre><code class='properties'>[relay]
RELAY_METHOD = consistent-hashing

LINE_RECEIVER_INTERFACE = x.x.x.x
LINE_RECEIVER_PORT = 2003

PICKLE_RECEIVER_INTERFACE = 127.0.0.1
PICKLE_RECEIVER_PORT = 2004

DESTINATIONS = cache1:2004:a,cache2:2004:a

MAX_DATAPOINTS_PER_MESSAGE = 500
MAX_QUEUE_SIZE = 10000

USE_FLOW_CONTROL = True</code></pre>
</div>


<p>For simplicity, we&#8217;re using the consistent-hashing method of sharding. The advantage to consistent-hasing is that Graphite will automatically split the metrics evenly across all carbon-cache instances. If you add another carbon-cache node, Graphite will start sending data to it. The disadvantage is that you have absolutely no control over which metric goes to which server. If you start with two nodes and then add a third node, Graphite will not automatically rebalance the data.</p>

<p>A couple key things to note:</p>

<ul>
<li>The RELAY_METHOD value is set to consistent-hashing</li>
<li>The LINE_RECEIVER_INTERFACE must be set to the IP address of the relay node, not localhost</li>
<li>The DESTINATIONS value must contain all of the target carbon-cache nodes</li>
<li>Each server listed in the DESTINATIONS option must include the name or ip address of a carbon-cache instance, the pickle-receiver port for the remote instance and the carbon-cache identifier. If you run multiple carbon-cache daemons on the remote server,  the first instance will be identified as &#8220;a&#8221;, the second instance as &#8220;b&#8221;, etc.</li>
</ul>


<p><code>relay.conf</code></p>

<div>
  <pre><code class='properties'>[default]
default = true
destinations = cache1,cache2</code></pre>
</div>


<p>This sample relay.conf shows us splitting the data automatically across two servers: cache1 and cache2.</p>

<h2>Carbon Cache</h2>

<p>On the carbon-cache servers, we need to configure the carbon-cache daemon to appropriately accept incoming data from the carbon-relay servers.</p>

<p><code>carbon.conf</code></p>

<div>
  <pre><code class='properties'>[cache]
LOCAL_DATA_DIR = /opt/graphite/storage/whisper/

MAX_CACHE_SIZE = inf

MAX_UPDATES_PER_SECOND = 800

MAX_CREATES_PER_MINUTE = 100

LINE_RECEIVER_INTERFACE = y.y.y.y
LINE_RECEIVER_PORT = 2003

PICKLE_RECEIVER_INTERFACE = y.y.y.y
PICKLE_RECEIVER_PORT = 2004

CACHE_QUERY_INTERFACE = 127.0.0.1
CACHE_QUERY_PORT = 7002

LOG_UPDATES = False</code></pre>
</div>


<p>There are several critical settings here. First, the pickle receiver must be configured correctly to allow incoming data from the carbon-relay server. Second, the line receiver must be configured correctly to allow the the webapp to communicate with the other carbon-cache instances.</p>

<ul>
<li>LINE_RECEIVER_INTERFACE must be set to the local ip address (not 127.0.0.1)</li>
<li>LINE_RECEIVER_PORT must be set to 2003</li>
<li>PICKLE_RECEIVER_INTERFACE must be set to the local ip address (not 127.0.0.1)</li>
<li>PICKLE_RECEIVER_PORT must match the port we listed in the DESTINATION line in carbon.conf on the carbon-relay server</li>
</ul>


<p>The other key is configuring the local_settings.py config file for the webapp correctly:</p>

<div>
  <pre><code class='properties'>CLUSTER_SERVERS = [ 'cache1','cache2' ]
MEMCACHE_HOSTS = [ 'memcache1.graphite:11211' ]</code></pre>
</div>


<p>The only mandatory piece of information in local_settings.py is CLUSTER_SERVERS, which must be a Python array containing strings that are the names (or ip address) of every carbon-cache server. You can optionally include an array of memcached instances to improve web performance dramatically. If you choose to utilize memcached, you can either run it locally on each carbon-cache instance or you can run a cluster of one or more memcached servers remotely. In the example above, we&#8217;re using a single memcached instance running on a remote server.</p>

<p>IMPORTANT NOTE: The local_settings.py file MUST be readable by the web server user. If you&#8217;re running Apache, this is typically the apache user. If the local_settings.py file is NOT readable, you will get very very strange errors.</p>

<h2>Firewall Rules</h2>

<p>To get this all working, specific ports must be open on the various firewalls. If you&#8217;re using Amazon EC2, your security groups will need to contain rules explicitly allowing incoming traffic on these ports:</p>

<h3>carbon-relay</h3>

<ol>
<li>Incoming on port 2003</li>
</ol>


<h3>carbon-cache/webapp</h3>

<ol>
<li>Incoming on port 2004 (messages from carbon-relay)</li>
<li>Incoming on port 2003 (requests for data from other carbon-cache servers)</li>
<li>Incoming on port 80 (web requests)</li>
<li>Incoming on port 11211 (if you&#8217;re running memcached locally)</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Logstash grok filters]]></title>
    <link href="http://organicveggie.github.com/blog/2012/05/15/testing-logstash-grok-filters/"/>
    <updated>2012-05-15T13:25:00-07:00</updated>
    <id>http://organicveggie.github.com/blog/2012/05/15/testing-logstash-grok-filters</id>
    <content type="html"><![CDATA[<p>Logstash is an outstanding tool for collecting and parsing logfiles. In particular, the grok filter is extremely useful to extract specific pieces of data from your logfiles. Once you pull data out of the logfiles into fields, you can easily search on those fields. Unfortunately, I find the format for patterns in grok filter challenging to write correctly. If you mess up your pattern, you will end up with the dreaded &#8220;_grokparsefailure&#8221; tag on your log entry. What you need is a way to test your patterns before adding them to Logstash.</p>

<!-- more -->


<p>As it turns out, you can test your patterns using the grok ruby library. @a1cy demonstrated the basics to me, but I wanted to describe the full process.</p>

<h2>Requirements</h2>

<ul>
<li>Ruby 1.9+</li>
<li>jls-grok gem</li>
</ul>


<p>On my machine, I chose to install Ruby 1.9.2 via RVM, but you can use whatever technique you want. If you try to use Ruby 1.8.7, you will get a syntax error when you load the grok gem.</p>

<h2>Load Grok</h2>

<p>You want to use the &#8220;grok-pure&#8221; library, which is 100% ruby, rather than &#8220;grok&#8221;, which depends on a C library.</p>

<div>
  <pre><code class='ruby'>require 'rubygems'
require 'grok-pure'
grok = Grok.new</code></pre>
</div>


<h2>Loading Patterns</h2>

<p>Since the grok filter in Logstash depends heavily on pattern files, I recommend you download the standard patterns from Github. Either the standard set for Logstash:</p>

<p><a href="https://github.com/logstash/logstash/tree/master/patterns">https://github.com/logstash/logstash/tree/master/patterns</a></p>

<p>Or you can use the ones with grok:</p>

<p><a href="https://github.com/jordansissel/ruby-grok/blob/master/patterns/pure-ruby">https://github.com/jordansissel/ruby-grok/blob/master/patterns/pure-ruby</a></p>

<p>Dump these into a directory so that you can load them with grok.</p>

<div>
  <pre><code class='ruby'>grok.add_patterns_from_file(&quot;/path/to/patterns/grok-patterns&quot;)</code></pre>
</div>


<p>You can use the same technique to load your own pattern files. Or you can manually add patterns by name:</p>

<div>
  <pre><code class='ruby'>grok.add_pattern(&quot;foo&quot;, &quot;.*foo.*&quot;)
grok.add_pattern(&quot;bar&quot;, &quot;.*bar.*&quot;)</code></pre>
</div>


<h2>Testing Patterns</h2>

<p>So, you have successfully loaded a set of patterns. How do you test something? Let&#8217;s take a sample log line from a MongoDB logfile:</p>

<p><code>Tue May 15 11:21:42 [conn1047685] moveChunk deleted: 7157</code></p>

<p>Let&#8217;s say we want to grab the date/time as well as the number of the deleted chunk. Unfortunately, the date/time format doesn&#8217;t match any of the stock patterns. We can build up a new date pattern and test it each step of the way:</p>

<div>
  <pre><code class='ruby'>text = &quot;Tue May 15 11:21:42 [conn1047685] moveChunk deleted: 7157&quot;
pattern = '%{DAY}'
grok.compile(pattern)
grok.match(text)</code></pre>
</div>


<p>The last line returns false if the pattern fails to match the input text. If the pattern matches the input text, Grok.match() returns a Grok::Match object that contains a lot of useful information about the match. You can ask Grok to output the text it capture by using the captures() method:</p>

<div>
  <pre><code class='ruby'>grok.match(text).captures()
 =&gt; {&quot;DAY&quot;=&gt;[&quot;Tue&quot;]}</code></pre>
</div>


<p>You can also test named captures, the same way you would use them in the Logstash grok filter:</p>

<div>
  <pre><code class='ruby'>pattern = '%{DAY:day_of_week}'
grok.compile(pattern)
grok.match(text).captures()
 =&gt; {&quot;DAY:day_of_week&quot;=&gt;[&quot;Tue&quot;]}</code></pre>
</div>


<p>The full date/time pattern for this example looks like the following:</p>

<div>
  <pre><code class='ruby'>pattern = '%{DAY} %{MONTH} %{MONTHDAY} %{TIME}'
grok.compile(pattern)
grok.match(text).capture()
 =&gt; {&quot;DAY&quot;=&gt;[&quot;Tue&quot;], &quot;MONTH&quot;=&gt;[&quot;May&quot;], &quot;MONTHDAY&quot;=&gt;[&quot;15&quot;], &quot;TIME&quot;=&gt;[&quot;11:21:42&quot;], &quot;HOUR&quot;=&gt;[&quot;11&quot;], &quot;MINUTE&quot;=&gt;[&quot;21&quot;], &quot;SECOND&quot;=&gt;[&quot;42&quot;]}</code></pre>
</div>


<p>Now let&#8217;s say we want to re-use this date/time pattern and still extract the chunk id from the log line. We can add a named pattern to the grok object manually and then reuse it, the same way we used patterns from the files:</p>

<div>
  <pre><code class='ruby'>grok.add_pattern(&quot;MONGO_TIMESTAMP&quot;, '%{DAY} %{MONTH} %{MONTHDAY} %{TIME}')
grok.compile(&quot;%{MONGO_TIMESTAMP}&quot;)
pattern = '%{MONGO_TIMESTAMP:timestamp}'
grok.compile(pattern)
grok.match(text).captures()
 =&gt; {&quot;MONGO_TIMESTAMP:timestamp&quot;=&gt;[&quot;Tue May 15 11:21:42&quot;], &quot;DAY&quot;=&gt;[&quot;Tue&quot;], &quot;MONTH&quot;=&gt;[&quot;May&quot;], &quot;MONTHDAY&quot;=&gt;[&quot;15&quot;], &quot;TIME&quot;=&gt;[&quot;11:21:42&quot;], &quot;HOUR&quot;=&gt;[&quot;11&quot;], &quot;MINUTE&quot;=&gt;[&quot;21&quot;], &quot;SECOND&quot;=&gt;[&quot;42&quot;]}</code></pre>
</div>


<p>We still want the chunk id, so we can use additional patterns:</p>

<div>
  <pre><code class='ruby'>pattern = '%{MONGO_TIMESTAMP:timestamp}%{GREEDYDATA} moveChunk deleted: %{NUMBER:chunk_id}'
grok.compile(pattern)
grok.match(text).captures()
 =&gt; {&quot;MONGO_TIMESTAMP:timestamp&quot;=&gt;[&quot;Tue May 15 11:21:42&quot;], &quot;DAY&quot;=&gt;[&quot;Tue&quot;], &quot;MONTH&quot;=&gt;[&quot;May&quot;], &quot;MONTHDAY&quot;=&gt;[&quot;15&quot;], &quot;TIME&quot;=&gt;[&quot;11:21:42&quot;], &quot;HOUR&quot;=&gt;[&quot;11&quot;], &quot;MINUTE&quot;=&gt;[&quot;21&quot;], &quot;SECOND&quot;=&gt;[&quot;42&quot;], &quot;GREEDYDATA&quot;=&gt;[&quot; [conn1047685]&quot;], &quot;NUMBER:chunk_id&quot;=&gt;[&quot;7157&quot;], &quot;BASE10NUM&quot;=&gt;[&quot;7157&quot;]}</code></pre>
</div>


<p>Let&#8217;s say we wanted to grab that connection number inside the square brackets:</p>

<div>
  <pre><code class='ruby'>pattern = '%{MONGO_TIMESTAMP:timestamp} \\[conn%{NUMBER:connection}\\] moveChunk deleted: %{NUMBER:chunk_id}'
grok.compile(pattern)
grok.match(text).captures()
 =&gt; {&quot;MONGO_TIMESTAMP:timestamp&quot;=&gt;[&quot;Tue May 15 11:21:42&quot;], &quot;DAY&quot;=&gt;[&quot;Tue&quot;], &quot;MONTH&quot;=&gt;[&quot;May&quot;], &quot;MONTHDAY&quot;=&gt;[&quot;15&quot;], &quot;TIME&quot;=&gt;[&quot;11:21:42&quot;], &quot;HOUR&quot;=&gt;[&quot;11&quot;], &quot;MINUTE&quot;=&gt;[&quot;21&quot;], &quot;SECOND&quot;=&gt;[&quot;42&quot;], &quot;NUMBER:connection&quot;=&gt;[&quot;1047685&quot;], &quot;BASE10NUM&quot;=&gt;[&quot;1047685&quot;, &quot;7157&quot;], &quot;NUMBER:chunk_id&quot;=&gt;[&quot;7157&quot;]}</code></pre>
</div>


<h2>Full Example</h2>

<div>
  <pre><code class='ruby'>require 'rubygems'
require 'grok-pure'
 
grok = Grok.new
 
text = &quot;Tue May 15 11:21:42 [conn1047685] moveChunk deleted: 7157&quot;
pattern = '%{MONGO_TIMESTAMP:timestamp} \\[conn%{NUMBER:connection}\\] moveChunk deleted: %{NUMBER:chunk_id}'
grok.compile(pattern)
grok.match(text).captures()
 =&gt; {&quot;MONGO_TIMESTAMP:timestamp&quot;=&gt;[&quot;Tue May 15 11:21:42&quot;], &quot;DAY&quot;=&gt;[&quot;Tue&quot;], &quot;MONTH&quot;=&gt;[&quot;May&quot;], &quot;MONTHDAY&quot;=&gt;[&quot;15&quot;], &quot;TIME&quot;=&gt;[&quot;11:21:42&quot;], &quot;HOUR&quot;=&gt;[&quot;11&quot;], &quot;MINUTE&quot;=&gt;[&quot;21&quot;], &quot;SECOND&quot;=&gt;[&quot;42&quot;], &quot;NUMBER:connection&quot;=&gt;[&quot;1047685&quot;], &quot;BASE10NUM&quot;=&gt;[&quot;1047685&quot;, &quot;7157&quot;], &quot;NUMBER:chunk_id&quot;=&gt;[&quot;7157&quot;]}</code></pre>
</div>


<p>You can also find an ultra simple example in the grok example folder on Github: <a href="https://github.com/jordansissel/ruby-grok/blob/master/examples/test.rb">https://github.com/jordansissel/ruby-grok/blob/master/examples/test.rb</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why PostgreSQL?]]></title>
    <link href="http://organicveggie.github.com/blog/2010/10/14/why-postgresql/"/>
    <updated>2010-10-14T22:49:00-07:00</updated>
    <id>http://organicveggie.github.com/blog/2010/10/14/why-postgresql</id>
    <content type="html"><![CDATA[<p>Quick overview of what PostgreSQL brings to the table that is not available in MySQL.</p>

<!-- more -->


<ul>
<li>Uses MVCC for all tables providing:

<ul>
<li>Fully transactional including ACID compliance for consistency</li>
<li>Nested transactions</li>
</ul>
</li>
<li>SQL 2008 compliant</li>
<li>Foreign keys for any table</li>
<li>Advanced table partitioning</li>
<li>Highly sophisticated query planner/optimizer

<ul>
<li>Can split up a query for execution across multiple CPUs simultaneously</li>
<li>Collects internal statistics for adaptive query planning</li>
<li>Special genetic query optimizer for queries with large numbers of joins</li>
<li>Supports multiple indexes per table per query</li>
</ul>
</li>
<li>Advanced support for query &amp; results caching</li>
<li>Hot/online backup</li>
<li>Point-in-time-recovery</li>
<li>Write-ahead logs for fault-tolerance</li>
<li>Tablespaces for controlling physical disk layout</li>
<li>Native asynchronous replication guaranteeing identical results on all machines. Supports both:

<ul>
<li>Streaming replication</li>
<li>Hot standby</li>
</ul>
</li>
<li>Partial indexes</li>
<li>Index creation/removal does not lock table</li>
<li>Full support for constraints</li>
<li>Transactional DDL - changes like table modifications can placed inside a transaction and rolled back</li>
</ul>


<p>Specific disadvantages to MySQL:</p>

<ul>
<li>Confusion with table types - MyISAM vs InnoDB</li>
<li>Designed to scale out not up - does not utilize larger numbers of cores efficiently and cannot spread queries across cores</li>
<li>Hot backup of is difficult for databases containing both InnoDB and MyISAM</li>
<li>Replication is mediocre and error prone</li>
<li>InnoDB stores the data with the primary key, so any queries using secondary indices are slower</li>
<li>Subqueries not well optimized</li>
<li>Only uses a single index per table per query</li>
<li>Index creation/removal requires an exclusive write lock</li>
<li>MyISAM only offers table level locking which causes severe performance degradation under heavy concurrency</li>
<li>Limited support for constraints</li>
<li>No transactional DDL - changes like table modifications are automatically committed and cannot be rolled back</li>
</ul>


<p>MySQL offers the following advantages over PostgreSQL:</p>

<ul>
<li>MyISAM tables can offer better read performance, specifically for simple SELECT queries, but at the cost of no support for transactions, foreign keys or data guarantees</li>
<li>COUNT(*) on MyISAM is very fast and slow on PostgreSQL</li>
<li>INSERT IGNORE and INSERT&#8230;ON DUPLICATE UPDATE</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Different content in Rails based on UserAgent]]></title>
    <link href="http://organicveggie.github.com/blog/2010/08/11/different-content-in-rails-based-on-useragent/"/>
    <updated>2010-08-11T10:57:00-07:00</updated>
    <id>http://organicveggie.github.com/blog/2010/08/11/different-content-in-rails-based-on-useragent</id>
    <content type="html"><![CDATA[<p>I was recently working on a website built using Rails that needed to render different content for certain user agents. Specifically, we needed simpler versions of certain pages for BlackBerry devices. Here&#8217;s how I accomplished it.</p>

<!-- more -->


<p>First, I added a new mime-type for BlackBerry by adding the following line to <code>config/initializers/mime_types.rb</code>:</p>

<figure class='code'><figcaption><span>mime_types.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Mime</span><span class="p">:</span><span class="ss">:Type</span><span class="o">.</span><span class="n">register_alias</span> <span class="s2">&quot;text/html&quot;</span><span class="p">,</span> <span class="ss">:blackberry</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, I added two utility methods to <code>app/controllers/application.rb</code>:</p>

<figure class='code'><figcaption><span>application.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Checks UserAgent</span>
</span><span class='line'><span class="k">def</span> <span class="nf">is_blackberry?</span>
</span><span class='line'>  <span class="n">ua</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">user_agent</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">ua</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="o">!</span> <span class="n">ua</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s1">&#39;blackberry&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Don&#39;t call the BlackBerry 9800 a BlackBerry, since it has a modern browser</span>
</span><span class='line'>  <span class="c1"># based on WebKit:</span>
</span><span class='line'>  <span class="c1"># Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, Like Gecko) Version/6.0.0.141 Mobile Safari/534.1+</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">ua</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s1">&#39;webkit&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Must be a BlackBerry!</span>
</span><span class='line'>  <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Sets the respond_to format to blackberry if blackberry</span>
</span><span class='line'><span class="k">def</span> <span class="nf">set_blackberry_format</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">!</span><span class="n">request</span><span class="o">.</span><span class="n">xhr?</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">is_blackberry?</span>
</span><span class='line'>    <span class="n">request</span><span class="o">.</span><span class="n">format</span> <span class="o">=</span> <span class="ss">:blackberry</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>With that in hand, it&#8217;s easy to render BlackBerry specific content on specific pages:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set_blackberry_format</span>
</span><span class='line'><span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">blackberry</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">js</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">:layout</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kp">false</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomcat init script for Ubuntu]]></title>
    <link href="http://organicveggie.github.com/blog/2010/07/25/tomcat-init-script-for-ubuntu/"/>
    <updated>2010-07-25T13:06:00-07:00</updated>
    <id>http://organicveggie.github.com/blog/2010/07/25/tomcat-init-script-for-ubuntu</id>
    <content type="html"><![CDATA[<p>Recently I spent some time working on improving my init scripts for Tomcat 6.x in a production environment running Ubuntu. One of the major problems we had encountered was that occasionally Tomcat refuses to shut down completely and requires a <code>kill -9</code> to stop it. The standard init scripts I had seen didn&#8217;t solve this problem at all.</p>

<!-- more -->


<p><a href="http://www.laliluna.de/">Laliluna</a> has a great <a href="http://www.laliluna.de/articles/tomcat-startup-script-linux.html">article</a> that focuses on RedHat, CentOS and Fedora. Unfortunately, their scripts didn&#8217;t work correctly under Ubuntu 8.04 LTS. As a result, I spent some time modifying their scripts to get them to work correctly under Unbuntu. Many thanks to Laliluna for doing the heavy work.</p>

<p>Without any further ado, here&#8217;s what I put together:</p>

<figure class='code'><figcaption><span>/etc/init.dtomcat  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Startup script for Jakarta Tomcat</span>
</span><span class='line'><span class="c"># Script should work on Ubuntu Linux.</span>
</span><span class='line'><span class="c"># WARNING: The script does not allow to run Tomcat on privileged ports as non root user. </span>
</span><span class='line'><span class="c"># For this use case try : &lt;a href=&quot;http://tomcat.apache.org/tomcat-6.0-doc/setup.html&quot;&gt;http://tomcat.apache.org/tomcat-6.0-doc/setup.html&lt;/a&gt; and &lt;a href=&quot;http://commons.apache.org/daemon/jsvc.html</span>
</span><span class='line'><span class="c">#&quot;&gt;http://commons.apache.org/daemon/jsvc.html</span>
</span><span class='line'><span class="c">#&lt;/a&gt; </span>
</span><span class='line'><span class="c"># Should start normally after the databases and before http server</span>
</span><span class='line'><span class="c"># chkconfig: 345 80 10</span>
</span><span class='line'><span class="c"># description: Jakarta Tomcat Java Servlet/JSP Container</span>
</span><span class='line'><span class="c"># processname: tomcat</span>
</span><span class='line'><span class="c"># pidfile: /var/run/tomcat/tomcat.pid</span>
</span><span class='line'>
</span><span class='line'><span class="c">##### In this area you can find settings which are likely to change frequently ####</span>
</span><span class='line'>
</span><span class='line'><span class="nv">JAVA</span><span class="o">=</span>/opt/java/current/bin/java
</span><span class='line'><span class="c"># unprivileged user running Tomcat server</span>
</span><span class='line'><span class="nv">tomcatuser</span><span class="o">=</span>tomcat
</span><span class='line'>
</span><span class='line'><span class="c"># servicename used as pidfile and lockfile name, must correspond to &#39;processname:&#39; at the top of this file</span>
</span><span class='line'><span class="c"># If not linux will not detect the running service during runlevel switch and will not shut it down normally</span>
</span><span class='line'><span class="nv">servicename</span><span class="o">=</span>tomcat
</span><span class='line'>
</span><span class='line'><span class="c"># folder where Tomcat is installed</span>
</span><span class='line'><span class="nv">CATALINA_HOME</span><span class="o">=</span>/opt/tomcat
</span><span class='line'>
</span><span class='line'><span class="c"># Options for the JVM</span>
</span><span class='line'><span class="nv">JAVA_OPTS</span><span class="o">=</span><span class="s2">&quot;$JAVA_OPTS -Xms1024m -Xmx2048m -XX:MaxPermSize=512m -XX:PermSize=128m&quot;</span>
</span><span class='line'><span class="nv">JAVA_OPTS</span><span class="o">=</span><span class="s2">&quot;$JAVA_OPTS -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:ParallelGCThreads=4 JAVA_OPTS=&quot;</span>-Djavax.servlet.request.encoding<span class="o">=</span>UTF-8 -Djavax.servlet.response.encoding<span class="o">=</span>UTF-8 -Dfile.encoding<span class="o">=</span>UTF-8 <span class="nv">$JAVA_OPTS</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2">##### End of frequent settings area #####</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2">pidfile=/var/run/tomcat/$servicename</span>
</span><span class='line'><span class="s2">lockfile=/var/lock/$servicename</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2">#runsecure=1 #starts tomcat with java security</span>
</span><span class='line'><span class="s2">runsecure=0</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2"># Optional additional libs you would like to add to the classpath (= JVM Option -classpath)</span>
</span><span class='line'><span class="s2">CLASSPATH=&quot;&quot;</span>
</span><span class='line'><span class="s2"># Optional Java Security Socket extension</span>
</span><span class='line'><span class="s2"># CLASSPATH=&quot;</span><span class="nv">$CLASSPATH</span><span class="s2">&quot;:&quot;</span><span class="nv">$JSSE_HOME</span><span class="s2">&quot;/lib/jcert.jar:&quot;</span><span class="nv">$JSSE_HOME</span><span class="s2">&quot;/lib/jnet.jar:&quot;</span><span class="nv">$JSSE_HOME</span><span class="s2">&quot;/lib/jsse.jar</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2"># path to Tomcat lib</span>
</span><span class='line'><span class="s2">CLASSPATH=&quot;</span><span class="nv">$CLASSPATH</span><span class="s2">&quot;:&quot;</span><span class="nv">$CATALINA_HOME</span><span class="s2">&quot;/bin/bootstrap.jar</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2"># Directory holding configuration, defaults to CATALINA_HOME</span>
</span><span class='line'><span class="s2"># In a Tomcat cluster you might reuse the servicename to identify the base directory</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2">CATALINA_BASE=&quot;</span><span class="nv">$CATALINA_HOME</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2"># server log during startup / shutdown</span>
</span><span class='line'><span class="s2">logfile=$CATALINA_BASE/logs/catalina.out</span>
</span><span class='line'><span class="s2"># endorsed allows to overwrite JVM libs -&amp;gt; JVM option -Djava.endorsed.dirs </span>
</span><span class='line'><span class="s2">#JAVA_ENDORSED_DIRS=&quot;</span><span class="nv">$CATALINABASEDIR</span><span class="s2">&quot;/endorsed</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2"># Define the java.io.tmpdir to use for Catalina</span>
</span><span class='line'><span class="s2">CATALINA_TMPDIR=&quot;</span><span class="nv">$CATALINA_BASE</span><span class="s2">&quot;/temp</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2"># Set juli LogManager if it is present</span>
</span><span class='line'><span class="s2">if [ -r &quot;</span><span class="nv">$CATALINA_BASE</span><span class="s2">&quot;/conf/logging.properties ]; then</span>
</span><span class='line'><span class="s2">  JAVA_OPTS=&quot;</span><span class="nv">$JAVA_OPTS</span> -Djava.util.logging.manager<span class="o">=</span>org.apache.juli.ClassLoaderLogManager<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  LOGGING_CONFIG=&quot;</span>-Djava.util.logging.config.file<span class="o">=</span><span class="nv">$CATALINA_BASE</span>/conf/logging.properties<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">fi</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2">#### End of settings #####</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2"># build java command to start Tomcat</span>
</span><span class='line'><span class="s2">command=&quot;</span><span class="nv">$JAVA</span> <span class="nv">$JAVA_OPTS</span> <span class="nv">$LOGGING_CONFIG</span> <span class="nv">$CATALINA_OPTS</span> <span class="nv">$LOGGING_CONFIG</span> <span class="se">\</span>
</span><span class='line'>      -Djava.endorsed.dirs<span class="o">=</span><span class="nv">$JAVA_ENDORSED_DIRS</span> -classpath <span class="nv">$CLASSPATH</span> <span class="se">\</span>
</span><span class='line'>      -Dcatalina.base<span class="o">=</span><span class="nv">$CATALINA_BASE</span> <span class="se">\</span>
</span><span class='line'>      -Dcatalina.home<span class="o">=</span><span class="nv">$CATALINA_HOME</span> <span class="se">\</span>
</span><span class='line'>      -Djava.io.tmpdir<span class="o">=</span><span class="nv">$CATALINA_TMPDIR</span><span class="s2">&quot; </span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2">if [ &quot;</span><span class="nv">$runsecure</span><span class="s2">&quot; = &quot;</span>1<span class="s2">&quot; ]; then</span>
</span><span class='line'><span class="s2">  command=&quot;</span><span class="nv">$command</span> -Djava.security.manager -Djava.security.policy<span class="o">=</span><span class="nv">$CATALINA_BASE</span>/conf/catalina.policy<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">fi</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2">command=&quot;</span><span class="nv">$command</span> org.apache.catalina.startup.Bootstrap<span class="s2">&quot;</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2">start()</span>
</span><span class='line'><span class="s2">{</span>
</span><span class='line'><span class="s2"> echo $&quot;</span>Starting <span class="nv">$servicename</span> based at <span class="nv">$CATALINA_BASE</span> <span class="s2">&quot;</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2"> daemon --user=$tomcatuser --pidfile=$pidfile --output=$logfile -- $command start</span>
</span><span class='line'><span class="s2"> RETVAL=$?</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2"> [ &quot;</span><span class="nv">$RETVAL</span><span class="s2">&quot; = 0 ] &amp;amp;&amp;amp; touch $lockfile</span>
</span><span class='line'><span class="s2"> echo</span>
</span><span class='line'><span class="s2">}</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2">stop()</span>
</span><span class='line'><span class="s2">{</span>
</span><span class='line'><span class="s2"> echo -n $&quot;</span>Stopping <span class="nv">$prog</span>: <span class="s2">&quot;</span>
</span><span class='line'><span class="s2"> if [ ! -r $pidfile ]; then</span>
</span><span class='line'><span class="s2">     echo &quot;</span>Pidfile <span class="nv">$pidfile</span> cannot be <span class="nb">read</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">     RETVAL=1</span>
</span><span class='line'><span class="s2">     return</span>
</span><span class='line'><span class="s2"> fi</span>
</span><span class='line'><span class="s2"> # Sends TERM signal first and kills finally after 10 seconds</span>
</span><span class='line'><span class="s2"> start-stop-daemon --pidfile $pidfile -R 10 --stop</span>
</span><span class='line'><span class="s2"> RETVAL=$?</span>
</span><span class='line'><span class="s2"> [ $RETVAL = 0 ] &amp;amp;&amp;amp; rm -f ${lockfile} ${pidfile}</span>
</span><span class='line'><span class="s2"> echo</span>
</span><span class='line'><span class="s2">}</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2">version()</span>
</span><span class='line'><span class="s2">{</span>
</span><span class='line'><span class="s2"> $JAVA -classpath $CATALINA_HOME/lib/catalina.jar org.apache.catalina.util.ServerInfo</span>
</span><span class='line'><span class="s2"> RETVAL=$?</span>
</span><span class='line'><span class="s2">}</span>
</span><span class='line'><span class="s2"> </span>
</span><span class='line'><span class="s2">case &quot;</span><span class="nv">$1</span><span class="s2">&quot; in</span>
</span><span class='line'><span class="s2"> start)</span>
</span><span class='line'><span class="s2">     start</span>
</span><span class='line'><span class="s2">     ;;</span>
</span><span class='line'><span class="s2"> stop)</span>
</span><span class='line'><span class="s2">     stop</span>
</span><span class='line'><span class="s2">     ;;</span>
</span><span class='line'><span class="s2"> restart)</span>
</span><span class='line'><span class="s2">     stop</span>
</span><span class='line'><span class="s2">     start</span>
</span><span class='line'><span class="s2">     ;;</span>
</span><span class='line'><span class="s2"> version)</span>
</span><span class='line'><span class="s2">     version</span>
</span><span class='line'><span class="s2">     ;;</span>
</span><span class='line'><span class="s2"> status)</span>
</span><span class='line'><span class="s2">     status -p $pidfile $servicename</span>
</span><span class='line'><span class="s2">     RETVAL=$?</span>
</span><span class='line'><span class="s2">     ;;</span>
</span><span class='line'><span class="s2"> *)</span>
</span><span class='line'><span class="s2">     echo $&quot;</span>Usage: <span class="nv">$0</span> <span class="o">{</span>start|stop|restart|version|status<span class="o">}</span><span class="err">&quot;</span>
</span><span class='line'>      <span class="nv">RETVAL</span><span class="o">=</span>1
</span><span class='line'><span class="k">esac</span>
</span><span class='line'><span class="nb">exit</span> <span class="nv">$RETVAL</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby mixin for the Enum pattern]]></title>
    <link href="http://organicveggie.github.com/blog/2010/06/03/ruby-mixin-for-the-enum-pattern/"/>
    <updated>2010-06-03T14:27:00-07:00</updated>
    <id>http://organicveggie.github.com/blog/2010/06/03/ruby-mixin-for-the-enum-pattern</id>
    <content type="html"><![CDATA[<p>Sometimes you just want to use an Enum. Unfortunately, if you&#8217;re a Ruby developer, Ruby does not offer a native enum structure.</p>

<!-- more -->


<p>Here&#8217;s a simple approach using a mixin module:</p>

<figure class='code'><figcaption><span>Enum.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">Enum</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">const_missing</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@enum_hash</span><span class="o">[</span><span class="n">key</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_enum</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@enum_hash</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="vi">@enum_hash</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="no">NameValuePair</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">key</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">downcase</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">each</span>
</span><span class='line'>    <span class="vi">@enum_hash</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="k">yield</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">enums</span>
</span><span class='line'>    <span class="vi">@enum_hash</span><span class="o">.</span><span class="n">keys</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">enum_values</span>
</span><span class='line'>    <span class="vi">@enum_hash</span><span class="o">.</span><span class="n">values</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_enum_hash</span>
</span><span class='line'>    <span class="vi">@enum_hash</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find_by_key</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@enum_hash</span><span class="o">[</span><span class="n">key</span><span class="o">.</span><span class="n">upcase</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Enum</code> mixin depends on a <code>NameValuePair</code> class to hold the data:</p>

<figure class='code'><figcaption><span>NameValuePair.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">NameValuePair</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:label</span><span class="p">,</span> <span class="ss">:value</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@label</span> <span class="o">=</span> <span class="n">label</span>
</span><span class='line'>    <span class="vi">@value</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">first</span>
</span><span class='line'>    <span class="vi">@label</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">last</span>
</span><span class='line'>    <span class="vi">@value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I included first and last methods to better support the <code>select</code> and <code>options_for_select</code> helper methods in Rails. Here&#8217;s how you might use it:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FooEnum</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Enum</span>
</span><span class='line'>
</span><span class='line'>   <span class="nb">self</span><span class="o">.</span><span class="n">add_enum</span><span class="p">(</span><span class="ss">:APPLE</span><span class="p">,</span> <span class="s2">&quot;Apple&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="nb">self</span><span class="o">.</span><span class="n">add_enum</span><span class="p">(</span><span class="ss">:PEAR</span><span class="p">,</span> <span class="s2">&quot;Pear&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="nb">self</span><span class="o">.</span><span class="n">add_enum</span><span class="p">(</span><span class="ss">:ALL</span><span class="p">,</span> <span class="s2">&quot;All Fruit&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="ss">FooEnum</span><span class="p">:</span><span class="ss">:APPLE</span> <span class="o">==&gt;</span> <span class="c1">#&lt;NameValuePair @value=&quot;apple&quot;, @label=&quot;Apple&quot;&gt;</span>
</span><span class='line'><span class="ss">FooEnum</span><span class="p">:</span><span class="ss">:ALL</span><span class="o">.</span><span class="n">value</span> <span class="o">==&gt;</span> <span class="s2">&quot;all&quot;</span>
</span><span class='line'><span class="ss">FooEnum</span><span class="p">:</span><span class="ss">:ALL</span><span class="o">.</span><span class="n">label</span> <span class="o">==&gt;</span> <span class="s2">&quot;All Fruit&quot;</span>
</span><span class='line'><span class="no">FooEnum</span><span class="o">.</span><span class="n">find_by_key</span><span class="p">(</span><span class="s1">&#39;apple&#39;</span><span class="p">)</span> <span class="o">==&gt;</span> <span class="c1">#&lt;NameValuePair @value=&quot;apple&quot;, @label=&quot;Apple&quot;&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To Rewrite or Not to Rewrite: The Ugly Question]]></title>
    <link href="http://organicveggie.github.com/blog/2010/04/24/to-rewrite-or-not-to-rewrite-the-ugly-question/"/>
    <updated>2010-04-24T14:07:00-07:00</updated>
    <id>http://organicveggie.github.com/blog/2010/04/24/to-rewrite-or-not-to-rewrite-the-ugly-question</id>
    <content type="html"><![CDATA[<p>I recently had a discussion about the idea of rewriting software from scratch. I actually played the devil&#8217;s advocate and argued against ever throwing out and rewriting, which really got me thinking about the whole concept.</p>

<!-- more -->


<p>The discussion centered around article by Joel Spolsky (of <a href="http://www.joelonsoftware.com/">Joel on Software</a>) titled <a href="http://www.joelonsoftware.com/articles/fog0000000069.html">Things You Should Never Do, Part 1</a>. His points against rewrites include:</p>

<ol>
<li>The ugly code you throw out has been hardened and tested. It&#8217;s filled with bug fixes. You&#8217;re throwing out that knowledge and expertise.</li>
<li>You&#8217;re throwing out market leadership and &#8220;giving a gift of two or three years to your competitors&#8221;.</li>
<li>You&#8217;re not going to do a better job writing the code a second time than you did the first time, especially since it&#8217;s unlikely you have the same team that wrote the earlier version.</li>
<li>You will introduce new bugs.</li>
</ol>


<p>Joel further argues that there are three major reasons developers want to rewrite code and none of them require rewrites:</p>

<ol>
<li>Architectural problems. The &#8220;you got your gui in my business logic&#8221; problem. This can be handled by small but steady code refactorings.</li>
<li>Inefficiency. Again, can be handled by small code refactorings.</li>
<li>The code is fugly. This may be due to complexity and bug fixes, in which case see point #1 above. Or it may be due to poor and changing naming conventions, in which case it can be fixed by a simple Find-Replace.</li>
</ol>


<p>These are all excellent points. On some level, I agree with this entirely. Even many nasty combinations of all three problems can be solved by steady refactorings. I have worked for places where people pushed for rewrites that weren&#8217;t necessary. But these were larger businesses with a well established core product. These were not early startups. That&#8217;s why I believe Joel makes several assumptions which are fatal to his arguments.</p>

<p>First, he assumes the software project is really large and complex. While some of us may have worked on projects of that size and scope, quite of few of us work on much smaller projects. Simply put, it&#8217;s a matter of scale.Second, as a corollary of his first assumption, Joel also assumes that a rewrite requires years not months. Again, this is likely true for a product like Excel or Word&#8230; but this simply isn&#8217;t true for many of the sites and products I&#8217;ve worked on. Furthermore, the use of agile or rapid development technologies such as Ruby on Rails can dramatically shrink this window.</p>

<p>Third, and perhaps most importantly, Joel assumes that the time required to cope with a messy code-base and make steady refactorings is significantly less than the time required to rewrite the app. And he assumes that&#8217;s a worthwhile trade off. This may be clear cut for larger products or companies, but I question whether or not that&#8217;s accurate for a startup. The more tangled your code, the longer it takes you to make changes. The longer it takes to make changes, the less nimble you are and the longer it takes you to respond to changes in company direction or marketplace demands.</p>

<p>It&#8217;s that last point that I believe is most important to those of us working for small startups. We tend to be small young companies who are still striving to find our exact place in the wider world. We&#8217;re often in cutting edge spaces where there is no clear cut path to success. And usually we&#8217;re steadily seeing greater numbers of competitors in our space. It seems to me that agility is vitally important to people us. We need to be able to makes changes rapidly as our knowledge of the space evolves. Fundamentally, I think it&#8217;s better to have a decent product/feature/whatever out in the hands of consumers than it is to have a nearly perfect product that&#8217;s still under development. Don&#8217;t get me wrong, I&#8217;m sure I&#8217;m preaching to the choir. :) But, I think it&#8217;s critical to keep the need for agility and nimbleness in the forefront of our thoughts.</p>

<p>Fourth, Joel assumes any architectural problems can be solved by steady refactoring. Frankly, I disagree. I think there exist serious architectural flaws, especially related to scalability that cannot be easily solved by refactoring. eBay, LinkedIn, Facebook and Yahoo have all had major rewrites in their history that were directly attributed to serious architectural failings.</p>

<p>That is not to say that a full rewrite is necessarily a desirable goal. :) However, it takes careful management and planning to avoid finding yourself in this position. eBay used to employ a strategy they called <a href="http://www.svproduct.com/engineering-wants-to-rewrite/">headroom</a>, which basically set aside 20+% of all development time to refactor code and it keep it in top working order. While I think it may very difficult to employ such a strategy in a startup, it may be worth considering.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FlashVars broken in IE8]]></title>
    <link href="http://organicveggie.github.com/blog/2010/03/10/flashvars-broken-in-ie8/"/>
    <updated>2010-03-10T10:16:00-08:00</updated>
    <id>http://organicveggie.github.com/blog/2010/03/10/flashvars-broken-in-ie8</id>
    <content type="html"><![CDATA[<p>Unsurprisingly, Internet Explorer 8 broke yet another feature of the web.</p>

<!-- more -->


<p>This time, the folks at Redmond broke how Internet Explorer passes the flashvars parameter into Flash. Typically, when placing a Flash object on an HTML page, you use the following syntax:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;object</span> <span class="na">id=</span><span class="s">&quot;flv&quot;</span> <span class="na">classid=</span><span class="s">&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot;</span> <span class="na">width=</span><span class="s">&quot;692&quot;</span> <span class="na">height=</span><span class="s">&quot;516&quot;</span> <span class="na">codebase=</span><span class="s">&quot;&lt;a href=&quot;</span><span class="na">http:</span><span class="err">//</span><span class="na">download</span><span class="err">.</span><span class="na">macromedia</span><span class="err">.</span><span class="na">com</span><span class="err">/</span><span class="na">pub</span><span class="err">/</span><span class="na">shockwave</span><span class="err">/</span><span class="na">cabs</span><span class="err">/</span><span class="na">flash</span><span class="err">/</span><span class="na">swflash</span><span class="err">.</span><span class="na">cab</span><span class="err">#</span><span class="na">version=</span><span class="s">9,0,0,0&quot;&quot;</span><span class="nt">&gt;</span>http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#vers...<span class="nt">&lt;/a&gt;</span> align=&quot;middle&quot;&gt;
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;allowScriptAccess&quot;</span> <span class="na">value=</span><span class="s">&quot;sameDomain&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;allowFullScreen&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;quality&quot;</span> <span class="na">value=</span><span class="s">&quot;high&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;bgcolor&quot;</span> <span class="na">value=</span><span class="s">&quot;#424242&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;FlashVars&quot;</span> <span class="na">value=</span><span class="s">&quot;name=value&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;wmode&quot;</span> <span class="na">value=</span><span class="s">&quot;transparent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;embed</span> <span class="na">type=</span><span class="s">&quot;application/x-shockwave-flash&quot;</span> <span class="na">width=</span><span class="s">&quot;692&quot;</span> <span class="na">height=</span><span class="s">&quot;516&quot;</span> <span class="na">src=</span><span class="s">&quot;&lt;a href=&quot;</span><span class="na">http:</span><span class="err">//</span><span class="na">www</span><span class="err">.</span><span class="na">example</span><span class="err">.</span><span class="na">com</span><span class="err">/</span><span class="na">mysample</span><span class="err">.</span><span class="na">swf</span><span class="err">&quot;&quot;</span><span class="nt">&gt;</span>http://www.example.com/mysample.swf&quot;<span class="nt">&lt;/a&gt;</span> align=&quot;middle&quot; pluginspage=&quot;<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.macromedia.com/go/getflashplayer&quot;</span><span class="err">&quot;</span><span class="nt">&gt;</span>http://www.macromedia.com/go/getflashplayer&quot;<span class="nt">&lt;/a&gt;</span> flashvars=&quot;name=value&quot; quality=&quot;high&quot; bgcolor=&quot;#424242&quot; wmode=&quot;transparent&quot; allowscriptaccess=&quot;sameDomain&quot; allowfullscreen=&quot;true&quot; name=&quot;flv&quot;&gt;<span class="nt">&lt;/embed&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;movie&quot;</span> <span class="na">value=</span><span class="s">&quot;&lt;a href=&quot;</span><span class="na">http:</span><span class="err">//</span><span class="na">www</span><span class="err">.</span><span class="na">example</span><span class="err">.</span><span class="na">com</span><span class="err">/</span><span class="na">mysample</span><span class="err">.</span><span class="na">swf</span><span class="err">&quot;&quot;</span><span class="nt">&gt;</span>http://www.example.com/mysample.swf&quot;<span class="nt">&lt;/a&gt;</span> /&gt;
</span><span class='line'><span class="nt">&lt;/object&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>OBJECT</code> tag is used by Internet Explorer and the <code>EMBED</code> tag is used by everyone else (Firefox, Safari, etc.). Although the flashvars paramter is not formally described in the <a href="http://www.w3.org/TR/html4/struct/objects.html#h-13.3.2">HTML 4.0.1 spec</a>, this code worked fine with IE 6 and IE 7. Unfortunately, IE 8 does not pass flashvars into the Flash Player. The only work around is to pass the flashvars parameter as part of the movie name parameter, as shown below:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;object</span> <span class="na">id=</span><span class="s">&quot;flv&quot;</span> <span class="na">classid=</span><span class="s">&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot;</span> <span class="na">width=</span><span class="s">&quot;692&quot;</span> <span class="na">height=</span><span class="s">&quot;516&quot;</span> <span class="na">codebase=</span><span class="s">&quot;&lt;a href=&quot;</span><span class="na">http:</span><span class="err">//</span><span class="na">download</span><span class="err">.</span><span class="na">macromedia</span><span class="err">.</span><span class="na">com</span><span class="err">/</span><span class="na">pub</span><span class="err">/</span><span class="na">shockwave</span><span class="err">/</span><span class="na">cabs</span><span class="err">/</span><span class="na">flash</span><span class="err">/</span><span class="na">swflash</span><span class="err">.</span><span class="na">cab</span><span class="err">#</span><span class="na">version=</span><span class="s">9,0,0,0&quot;&quot;</span><span class="nt">&gt;</span>http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#vers...<span class="nt">&lt;/a&gt;</span> align=&quot;middle&quot;&gt;
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;allowScriptAccess&quot;</span> <span class="na">value=</span><span class="s">&quot;sameDomain&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;allowFullScreen&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;quality&quot;</span> <span class="na">value=</span><span class="s">&quot;high&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;bgcolor&quot;</span> <span class="na">value=</span><span class="s">&quot;#424242&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;FlashVars&quot;</span> <span class="na">value=</span><span class="s">&quot;name=value&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;wmode&quot;</span> <span class="na">value=</span><span class="s">&quot;transparent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;embed</span> <span class="na">type=</span><span class="s">&quot;application/x-shockwave-flash&quot;</span> <span class="na">width=</span><span class="s">&quot;692&quot;</span> <span class="na">height=</span><span class="s">&quot;516&quot;</span> <span class="na">src=</span><span class="s">&quot;&lt;a href=&quot;</span><span class="na">http:</span><span class="err">//</span><span class="na">www</span><span class="err">.</span><span class="na">example</span><span class="err">.</span><span class="na">com</span><span class="err">/</span><span class="na">mysample</span><span class="err">.</span><span class="na">swf</span><span class="err">&quot;&quot;</span><span class="nt">&gt;</span>http://www.example.com/mysample.swf&quot;<span class="nt">&lt;/a&gt;</span> align=&quot;middle&quot; pluginspage=&quot;<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.macromedia.com/go/getflashplayer&quot;</span><span class="err">&quot;</span><span class="nt">&gt;</span>http://www.macromedia.com/go/getflashplayer&quot;<span class="nt">&lt;/a&gt;</span> flashvars=&quot;name=value&quot; quality=&quot;high&quot; bgcolor=&quot;#424242&quot; wmode=&quot;transparent&quot; allowscriptaccess=&quot;sameDomain&quot; allowfullscreen=&quot;true&quot; name=&quot;flv&quot;&gt;<span class="nt">&lt;/embed&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;movie&quot;</span> <span class="na">value=</span><span class="s">&quot;&lt;a href=&quot;</span><span class="na">http:</span><span class="err">//</span><span class="na">www</span><span class="err">.</span><span class="na">example</span><span class="err">.</span><span class="na">com</span><span class="err">/</span><span class="na">mysample</span><span class="err">.</span><span class="na">swf</span><span class="err">?</span><span class="na">name=</span><span class="s">value&quot;&quot;</span><span class="nt">&gt;</span>http://www.example.com/mysample.swf?name=value&quot;<span class="nt">&lt;/a&gt;</span> /&gt;
</span><span class='line'><span class="nt">&lt;/object&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
