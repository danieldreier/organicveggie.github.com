<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Blind Squirrel]]></title>
  <link href="http://bealetech.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://bealetech.com/"/>
  <updated>2013-05-26T14:51:32-07:00</updated>
  <id>http://bealetech.com/</id>
  <author>
    <name><![CDATA[Sean Laurent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pushing to Maven Central with Sonatype]]></title>
    <link href="http://bealetech.com/blog/2013/04/10/pushing-to-maven-central-with-sonatype/"/>
    <updated>2013-04-10T15:07:00-07:00</updated>
    <id>http://bealetech.com/blog/2013/04/10/pushing-to-maven-central-with-sonatype</id>
    <content type="html"><![CDATA[<p>Getting your opensource JAR published to Maven Central is free, but requires a little bit of up front work. I use <a href="https://sonatype.org">Sonatype</a> to help publish the jars for <a href="https://github.com/organicveggie/metrics-statsd">metrics-statsd</a>, which makes life much easier.
Most of the process is documented by Sonatype, which you can read about here:</p>

<p><a href="https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide">https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide</a></p>

<p>There were a few tricky parts that either weren't documented well or I just found confusing. I have tried to document some of these parts below.</p>

<!-- more -->


<h1>Terminology</h1>

<p>In case you're as easily confused as I was, Sonatype uses three different terms when talking about pushing jars:</p>

<ol>
<li><strong>Deploy</strong> refers to deploying <em>snapshots</em> to Sonatype.</li>
<li><strong>Staging</strong> refers to pushing potential release artifacts to Sonatype. Note that <em>staging</em> an artifact does not automatically push it to Maven Central.</li>
<li><strong>Release</strong> refers to marking the artifacts for release on Sonatype's Nexus server so that they get pushed to Maven Central.</li>
</ol>


<h1>Required Changes</h1>

<h2>Artifacts</h2>

<p>Pushing jars to Maven Central requires that you produce three artifacts:</p>

<ol>
<li>Main jar with compiled classes</li>
<li>Sources jar</li>
<li>Javadocs jar</li>
</ol>


<p>To automatically generate the second and third artifacts, add the following to the build plugins section of your <code>pom.xml</code>:</p>

<p>```xml
<plugin></p>

<pre><code>&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
&lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;
&lt;version&gt;2.1.2&lt;/version&gt;
&lt;executions&gt;
    &lt;execution&gt;
        &lt;id&gt;attach-sources&lt;/id&gt;
        &lt;goals&gt;
            &lt;goal&gt;jar&lt;/goal&gt;
        &lt;/goals&gt;
    &lt;/execution&gt;
&lt;/executions&gt;
</code></pre>

<p></plugin>
<plugin></p>

<pre><code>&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
&lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;
&lt;version&gt;2.8.1&lt;/version&gt;
&lt;executions&gt;
    &lt;execution&gt;
        &lt;id&gt;attach-javadocs&lt;/id&gt;
        &lt;goals&gt;
            &lt;goal&gt;jar&lt;/goal&gt;
        &lt;/goals&gt;
    &lt;/execution&gt;
&lt;/executions&gt;
</code></pre>

<p></plugin>
```</p>

<h2>Artifact Signing</h2>

<p>Maven Central requires that you sign your released artifacts with GPG. Note that <em>snapshots</em> do not need to be signed. Sonatype has a thorough article on signing your artifacts:</p>

<p><a href="https://docs.sonatype.org/display/Repository/How+To+Generate+PGP+Signatures+With+Maven">How to Generate PGP Signatures With Maven</a></p>

<p>The key steps are:</p>

<ol>
<li>Generate a key pair</li>
<li>Distribute your public key</li>
<li>Update your <code>pom.xml</code></li>
</ol>


<p>The first two steps are straightforward. The only trick with the third step is that you <em>only</em> want to sign artifacts during the release process. If you add the <code>maven-gpg-plugin</code> to your main, every single build will get signed and Maven will prompt you for your passphrase with every build. Instead, you can define a Maven profile with a specific name and include the <code>maven-gpg-plugin</code> there.</p>

<p>```xml
<profiles>
  <profile></p>

<pre><code>&lt;id&gt;release-sign-artifacts&lt;/id&gt;
&lt;activation&gt;
  &lt;property&gt;
    &lt;name&gt;performRelease&lt;/name&gt;
    &lt;value&gt;true&lt;/value&gt;
  &lt;/property&gt;
&lt;/activation&gt;
&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
      &lt;artifactId&gt;maven-gpg-plugin&lt;/artifactId&gt;
      &lt;version&gt;1.1&lt;/version&gt;
      &lt;executions&gt;
        &lt;execution&gt;
          &lt;id&gt;sign-artifacts&lt;/id&gt;
          &lt;phase&gt;verify&lt;/phase&gt;
          &lt;goals&gt;
            &lt;goal&gt;sign&lt;/goal&gt;
          &lt;/goals&gt;
        &lt;/execution&gt;
      &lt;/executions&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>

<p>  </profile>
</profiles>
```</p>

<h2>distributionManagement</h2>

<p>Following the recommendation from Sonatype, you will remove the <code>&lt;repositories&gt;&lt;/repositories&gt;</code> section of your <code>pom.xml</code>. Once you do that, Maven no longer knows what server to use when <em>deploying</em> or <em>staging</em>. To compensate, you need to add a <code>distributionManagement</code> section:</p>

<p>```xml</p>

<pre><code>&lt;distributionManagement&gt;
    &lt;snapshotRepository&gt;
        &lt;id&gt;sonatype-nexus-snapshots&lt;/id&gt;
        &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots/&lt;/url&gt;
    &lt;/snapshotRepository&gt;
    &lt;repository&gt;
        &lt;id&gt;sonatype-nexus-staging&lt;/id&gt;
        &lt;url&gt;https://oss.sonatype.org/service/local/staging/deploy/maven2/&lt;/url&gt;
    &lt;/repository&gt;
&lt;/distributionManagement&gt;
</code></pre>

<p>```</p>

<h2>Sonatype Parent POM</h2>

<p>You need to configure your <code>pom.xml</code> to inherit from the Sonatype Parent POM:</p>

<p>```xml
<parent></p>

<pre><code>&lt;groupId&gt;org.sonatype.oss&lt;/groupId&gt;
&lt;artifactId&gt;oss-parent&lt;/artifactId&gt;
&lt;version&gt;7&lt;/version&gt;
</code></pre>

<p></parent>
```</p>

<h1>Deploying</h1>

<p>Assuming you've followed the instructions from Sonatype and setup an account, you're now ready to deploy snapshots. The process is simple:</p>

<p><code>bash
mvn clean deploy
</code></p>

<p>That will automatically clean, build and push your snapshot to Sonatype.</p>

<h1>Releasing</h1>

<p>Pushing a release jar to Maven Central consists of two parts: staging and releasing.</p>

<h2>Staging</h2>

<p>In this part we clean everything up; prepare for the build by creating a tag for the release and updating the pom.xml; perform the build; deploy the artifacts to Sonatype.</p>

<p>The process consists of three commands:</p>

<p><code>bash
mvn release:clean
mvn release:prepare
mvn release:perform
</code></p>

<p>The <code>release:prepare</code> step will prompt you for release information. Here is some sample output from the 2.3.0 release of <a href="https://github.com/organicveggie/metrics-statsd">metrics-statsd</a>:</p>

<p><code>bash
$ mvn release:prepare
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Metrics Statsd Support 2.3.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-release-plugin:2.2.1:prepare (default-cli) @ metrics-statsd ---
[INFO] Verifying that there are no local modifications...
[INFO]   ignoring changes on: pom.xml.next, release.properties, pom.xml.releaseBackup, pom.xml.backup, pom.xml.branch, pom.xml.tag
[INFO] Executing: /bin/sh -c cd /Users/sean/src/metrics-statsd &amp;&amp; git status
[INFO] Working directory: /Users/sean/src/metrics-statsd
[INFO] Checking dependencies and plugins for snapshots ...
What is the release version for "Metrics Statsd Support"? (com.bealetech:metrics-statsd) 2.3.0: :
What is SCM release tag or label for "Metrics Statsd Support"? (com.bealetech:metrics-statsd) v2.3.0: :
What is the new development version for "Metrics Statsd Support"? (com.bealetech:metrics-statsd) 2.3.1-SNAPSHOT: :
</code></p>

<h2>Releasing</h2>

<p>Once the artifacts are staged on Sonatype's Nexus, you need to go through a few annoying steps:</p>

<ul>
<li>Close out the staging release in Sonatype</li>
<li>Release the artifacts in Sonatype</li>
</ul>


<p>That process is well documented (with images) by Sonatype:</p>

<p><a href="https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-8a.ReleaseIt">https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-8a.ReleaseIt</a></p>

<p>Within two hours, Sonatype will push the artifacts to Maven Centrl.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Different content in Rails based on UserAgent]]></title>
    <link href="http://bealetech.com/blog/2010/08/11/different-content-in-rails-based-on-useragent/"/>
    <updated>2010-08-11T10:57:00-07:00</updated>
    <id>http://bealetech.com/blog/2010/08/11/different-content-in-rails-based-on-useragent</id>
    <content type="html"><![CDATA[<p>I was recently working on a website built using Rails that needed to render different content for certain user agents. Specifically, we needed simpler versions of certain pages for BlackBerry devices. Here's how I accomplished it.</p>

<!-- more -->


<p>First, I added a new mime-type for BlackBerry by adding the following line to <code>config/initializers/mime_types.rb</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>mime_types.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Mime</span><span class="p">:</span><span class="ss">:Type</span><span class="o">.</span><span class="n">register_alias</span> <span class="s2">&quot;text/html&quot;</span><span class="p">,</span> <span class="ss">:blackberry</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Next, I added two utility methods to <code>app/controllers/application.rb</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>application.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Checks UserAgent&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">is_blackberry?</span>
</span><span class='line'>  <span class="n">ua</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">user_agent</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">ua</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="o">!</span> <span class="n">ua</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s1">&#39;blackberry&#39;</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # Don&#39;t call the BlackBerry 9800 a BlackBerry, since it has a modern browser</span>
</span><span class='line'><span class="sr">  # based on WebKit:</span>
</span><span class='line'><span class="sr">  # Mozilla/</span><span class="mi">5</span><span class="o">.</span><span class="mi">0</span> <span class="p">(</span><span class="no">BlackBerry</span><span class="p">;</span> <span class="n">U</span><span class="p">;</span> <span class="no">BlackBerry</span> <span class="mi">9800</span><span class="p">;</span> <span class="n">en</span><span class="p">)</span> <span class="no">AppleWebKit</span><span class="o">/</span><span class="mi">534</span><span class="o">.</span><span class="mi">1</span><span class="o">+</span> <span class="p">(</span><span class="no">KHTML</span><span class="p">,</span> <span class="no">Like</span> <span class="no">Gecko</span><span class="p">)</span> <span class="no">Version</span><span class="o">/</span><span class="mi">6</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">141</span> <span class="no">Mobile</span> <span class="no">Safari</span><span class="o">/</span><span class="mi">534</span><span class="o">.</span><span class="mi">1</span><span class="o">+</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">ua</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s1">&#39;webkit&#39;</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # Must be a BlackBerry!</span>
</span><span class='line'><span class="sr">  true</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Sets</span> <span class="n">the</span> <span class="n">respond_to</span> <span class="nb">format</span> <span class="n">to</span> <span class="n">blackberry</span> <span class="k">if</span> <span class="n">blackberry</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def set_blackberry_format</span>
</span><span class='line'><span class="sr">  if !request.xhr? &amp;amp;&amp;amp; is_blackberry?&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">request</span><span class="o">.</span><span class="n">format</span> <span class="o">=</span> <span class="ss">:blackberry</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>With that in hand, it's easy to render BlackBerry specific content on specific pages:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set_blackberry_format</span>
</span><span class='line'><span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">blackberry</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">js</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">:layout</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kp">false</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby mixin for the Enum pattern]]></title>
    <link href="http://bealetech.com/blog/2010/06/03/ruby-mixin-for-the-enum-pattern/"/>
    <updated>2010-06-03T14:27:00-07:00</updated>
    <id>http://bealetech.com/blog/2010/06/03/ruby-mixin-for-the-enum-pattern</id>
    <content type="html"><![CDATA[<p>Sometimes you just want to use an Enum. Unfortunately, if you're a Ruby developer, Ruby does not offer a native enum structure.</p>

<!-- more -->


<p>Here's a simple approach using a mixin module:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Enum.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">Enum</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">const_missing</span><span class="p">(</span><span class="n">key</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@enum_hash[key]</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">add_enum</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@enum_hash ||= {}</span>
</span><span class='line'><span class="sr">@enum_hash[key] = NameValuePair.new(value, key.to_s.downcase)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">each</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@enum_hash.each {|key, value| yield(key, value) }</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">enums</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@enum_hash.keys</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">enum_values</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@enum_hash.values</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">get_enum_hash</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@enum_hash</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">find_by_key</span><span class="p">(</span><span class="n">key</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@enum_hash[key.upcase.to_sym]</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>Enum</code> mixin depends on a <code>NameValuePair</code> class to hold the data:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>NameValuePair.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">NameValuePair</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:label</span><span class="p">,</span> <span class="ss">:value</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def initialize(label, value)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@label</span> <span class="o">=</span> <span class="n">label</span>
</span><span class='line'><span class="vi">@value</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def first&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@label</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def last&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@value</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I included first and last methods to better support the <code>select</code> and <code>options_for_select</code> helper methods in Rails. Here's how you might use it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FooEnum</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Enum</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   self.add_enum(:APPLE, &quot;Apple&quot;)</span>
</span><span class='line'><span class="sr">   self.add_enum(:PEAR, &quot;Pear&quot;)</span>
</span><span class='line'><span class="sr">   self.add_enum(:ALL, &quot;All Fruit&quot;)</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="ss">FooEnum</span><span class="p">:</span><span class="ss">:APPLE</span> <span class="o">==&gt;</span> <span class="c1">#&lt;NameValuePair @value=&quot;apple&quot;, @label=&quot;Apple&quot;&gt;</span>
</span><span class='line'><span class="ss">FooEnum</span><span class="p">:</span><span class="ss">:ALL</span><span class="o">.</span><span class="n">value</span> <span class="o">==&gt;</span> <span class="s2">&quot;all&quot;</span>
</span><span class='line'><span class="ss">FooEnum</span><span class="p">:</span><span class="ss">:ALL</span><span class="o">.</span><span class="n">label</span> <span class="o">==&gt;</span> <span class="s2">&quot;All Fruit&quot;</span>
</span><span class='line'><span class="no">FooEnum</span><span class="o">.</span><span class="n">find_by_key</span><span class="p">(</span><span class="s1">&#39;apple&#39;</span><span class="p">)</span> <span class="o">==&gt;</span> <span class="c1">#&lt;NameValuePair @value=&quot;apple&quot;, @label=&quot;Apple&quot;&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To Rewrite or Not to Rewrite: The Ugly Question]]></title>
    <link href="http://bealetech.com/blog/2010/04/24/to-rewrite-or-not-to-rewrite-the-ugly-question/"/>
    <updated>2010-04-24T14:07:00-07:00</updated>
    <id>http://bealetech.com/blog/2010/04/24/to-rewrite-or-not-to-rewrite-the-ugly-question</id>
    <content type="html"><![CDATA[<p>I recently had a discussion about the idea of rewriting software from scratch. I actually played the devil's advocate and argued against ever throwing out and rewriting, which really got me thinking about the whole concept.</p>

<!-- more -->


<p>The discussion centered around article by Joel Spolsky (of <a href="http://www.joelonsoftware.com/">Joel on Software</a>) titled <a href="http://www.joelonsoftware.com/articles/fog0000000069.html">Things You Should Never Do, Part 1</a>. His points against rewrites include:</p>

<ol>
<li>The ugly code you throw out has been hardened and tested. It's filled with bug fixes. You're throwing out that knowledge and expertise.</li>
<li>You're throwing out market leadership and "giving a gift of two or three years to your competitors".</li>
<li>You're not going to do a better job writing the code a second time than you did the first time, especially since it's unlikely you have the same team that wrote the earlier version.</li>
<li>You will introduce new bugs.</li>
</ol>


<p>Joel further argues that there are three major reasons developers want to rewrite code and none of them require rewrites:</p>

<ol>
<li>Architectural problems. The "you got your gui in my business logic" problem. This can be handled by small but steady code refactorings.</li>
<li>Inefficiency. Again, can be handled by small code refactorings.</li>
<li>The code is fugly. This may be due to complexity and bug fixes, in which case see point #1 above. Or it may be due to poor and changing naming conventions, in which case it can be fixed by a simple Find-Replace.</li>
</ol>


<p>These are all excellent points. On some level, I agree with this entirely. Even many nasty combinations of all three problems can be solved by steady refactorings. I have worked for places where people pushed for rewrites that weren't necessary. But these were larger businesses with a well established core product. These were not early startups. That's why I believe Joel makes several assumptions which are fatal to his arguments.</p>

<p>First, he assumes the software project is really large and complex. While some of us may have worked on projects of that size and scope, quite of few of us work on much smaller projects. Simply put, it's a matter of scale.Second, as a corollary of his first assumption, Joel also assumes that a rewrite requires years not months. Again, this is likely true for a product like Excel or Word... but this simply isn't true for many of the sites and products I've worked on. Furthermore, the use of agile or rapid development technologies such as Ruby on Rails can dramatically shrink this window.</p>

<p>Third, and perhaps most importantly, Joel assumes that the time required to cope with a messy code-base and make steady refactorings is significantly less than the time required to rewrite the app. And he assumes that's a worthwhile trade off. This may be clear cut for larger products or companies, but I question whether or not that's accurate for a startup. The more tangled your code, the longer it takes you to make changes. The longer it takes to make changes, the less nimble you are and the longer it takes you to respond to changes in company direction or marketplace demands.</p>

<p>It's that last point that I believe is most important to those of us working for small startups. We tend to be small young companies who are still striving to find our exact place in the wider world. We're often in cutting edge spaces where there is no clear cut path to success. And usually we're steadily seeing greater numbers of competitors in our space. It seems to me that agility is vitally important to people us. We need to be able to makes changes rapidly as our knowledge of the space evolves. Fundamentally, I think it's better to have a decent product/feature/whatever out in the hands of consumers than it is to have a nearly perfect product that's still under development. Don't get me wrong, I'm sure I'm preaching to the choir. :) But, I think it's critical to keep the need for agility and nimbleness in the forefront of our thoughts.</p>

<p>Fourth, Joel assumes any architectural problems can be solved by steady refactoring. Frankly, I disagree. I think there exist serious architectural flaws, especially related to scalability that cannot be easily solved by refactoring. eBay, LinkedIn, Facebook and Yahoo have all had major rewrites in their history that were directly attributed to serious architectural failings.</p>

<p>That is not to say that a full rewrite is necessarily a desirable goal. :) However, it takes careful management and planning to avoid finding yourself in this position. eBay used to employ a strategy they called <a href="http://www.svproduct.com/engineering-wants-to-rewrite/">headroom</a>, which basically set aside 20+% of all development time to refactor code and it keep it in top working order. While I think it may very difficult to employ such a strategy in a startup, it may be worth considering.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FlashVars broken in IE8]]></title>
    <link href="http://bealetech.com/blog/2010/03/10/flashvars-broken-in-ie8/"/>
    <updated>2010-03-10T10:16:00-08:00</updated>
    <id>http://bealetech.com/blog/2010/03/10/flashvars-broken-in-ie8</id>
    <content type="html"><![CDATA[<p>Unsurprisingly, Internet Explorer 8 broke yet another feature of the web.</p>

<!-- more -->


<p>This time, the folks at Redmond broke how Internet Explorer passes the flashvars parameter into Flash. Typically, when placing a Flash object on an HTML page, you use the following syntax:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;object</span> <span class="na">id=</span><span class="s">&quot;flv&quot;</span> <span class="na">classid=</span><span class="s">&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot;</span> <span class="na">width=</span><span class="s">&quot;692&quot;</span> <span class="na">height=</span><span class="s">&quot;516&quot;</span> <span class="na">codebase=</span><span class="s">&quot;&lt;a href=&quot;</span><span class="na">http:</span><span class="err">//</span><span class="na">download</span><span class="err">.</span><span class="na">macromedia</span><span class="err">.</span><span class="na">com</span><span class="err">/</span><span class="na">pub</span><span class="err">/</span><span class="na">shockwave</span><span class="err">/</span><span class="na">cabs</span><span class="err">/</span><span class="na">flash</span><span class="err">/</span><span class="na">swflash</span><span class="err">.</span><span class="na">cab</span><span class="err">#</span><span class="na">version=</span><span class="s">9,0,0,0&quot;&quot;</span><span class="nt">&gt;</span>http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#vers...<span class="nt">&lt;/a&gt;</span> align=&quot;middle&quot;&gt;
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;allowScriptAccess&quot;</span> <span class="na">value=</span><span class="s">&quot;sameDomain&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;allowFullScreen&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;quality&quot;</span> <span class="na">value=</span><span class="s">&quot;high&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;bgcolor&quot;</span> <span class="na">value=</span><span class="s">&quot;#424242&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;FlashVars&quot;</span> <span class="na">value=</span><span class="s">&quot;name=value&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;wmode&quot;</span> <span class="na">value=</span><span class="s">&quot;transparent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;embed</span> <span class="na">type=</span><span class="s">&quot;application/x-shockwave-flash&quot;</span> <span class="na">width=</span><span class="s">&quot;692&quot;</span> <span class="na">height=</span><span class="s">&quot;516&quot;</span> <span class="na">src=</span><span class="s">&quot;&lt;a href=&quot;</span><span class="na">http:</span><span class="err">//</span><span class="na">www</span><span class="err">.</span><span class="na">example</span><span class="err">.</span><span class="na">com</span><span class="err">/</span><span class="na">mysample</span><span class="err">.</span><span class="na">swf</span><span class="err">&quot;&quot;</span><span class="nt">&gt;</span>http://www.example.com/mysample.swf&quot;<span class="nt">&lt;/a&gt;</span> align=&quot;middle&quot; pluginspage=&quot;<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.macromedia.com/go/getflashplayer&quot;</span><span class="err">&quot;</span><span class="nt">&gt;</span>http://www.macromedia.com/go/getflashplayer&quot;<span class="nt">&lt;/a&gt;</span> flashvars=&quot;name=value&quot; quality=&quot;high&quot; bgcolor=&quot;#424242&quot; wmode=&quot;transparent&quot; allowscriptaccess=&quot;sameDomain&quot; allowfullscreen=&quot;true&quot; name=&quot;flv&quot;&gt;<span class="nt">&lt;/embed&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;movie&quot;</span> <span class="na">value=</span><span class="s">&quot;&lt;a href=&quot;</span><span class="na">http:</span><span class="err">//</span><span class="na">www</span><span class="err">.</span><span class="na">example</span><span class="err">.</span><span class="na">com</span><span class="err">/</span><span class="na">mysample</span><span class="err">.</span><span class="na">swf</span><span class="err">&quot;&quot;</span><span class="nt">&gt;</span>http://www.example.com/mysample.swf&quot;<span class="nt">&lt;/a&gt;</span> /&gt;
</span><span class='line'><span class="nt">&lt;/object&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>OBJECT</code> tag is used by Internet Explorer and the <code>EMBED</code> tag is used by everyone else (Firefox, Safari, etc.). Although the flashvars paramter is not formally described in the <a href="http://www.w3.org/TR/html4/struct/objects.html#h-13.3.2">HTML 4.0.1 spec</a>, this code worked fine with IE 6 and IE 7. Unfortunately, IE 8 does not pass flashvars into the Flash Player. The only work around is to pass the flashvars parameter as part of the movie name parameter, as shown below:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;object</span> <span class="na">id=</span><span class="s">&quot;flv&quot;</span> <span class="na">classid=</span><span class="s">&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot;</span> <span class="na">width=</span><span class="s">&quot;692&quot;</span> <span class="na">height=</span><span class="s">&quot;516&quot;</span> <span class="na">codebase=</span><span class="s">&quot;&lt;a href=&quot;</span><span class="na">http:</span><span class="err">//</span><span class="na">download</span><span class="err">.</span><span class="na">macromedia</span><span class="err">.</span><span class="na">com</span><span class="err">/</span><span class="na">pub</span><span class="err">/</span><span class="na">shockwave</span><span class="err">/</span><span class="na">cabs</span><span class="err">/</span><span class="na">flash</span><span class="err">/</span><span class="na">swflash</span><span class="err">.</span><span class="na">cab</span><span class="err">#</span><span class="na">version=</span><span class="s">9,0,0,0&quot;&quot;</span><span class="nt">&gt;</span>http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#vers...<span class="nt">&lt;/a&gt;</span> align=&quot;middle&quot;&gt;
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;allowScriptAccess&quot;</span> <span class="na">value=</span><span class="s">&quot;sameDomain&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;allowFullScreen&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;quality&quot;</span> <span class="na">value=</span><span class="s">&quot;high&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;bgcolor&quot;</span> <span class="na">value=</span><span class="s">&quot;#424242&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;FlashVars&quot;</span> <span class="na">value=</span><span class="s">&quot;name=value&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;wmode&quot;</span> <span class="na">value=</span><span class="s">&quot;transparent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;embed</span> <span class="na">type=</span><span class="s">&quot;application/x-shockwave-flash&quot;</span> <span class="na">width=</span><span class="s">&quot;692&quot;</span> <span class="na">height=</span><span class="s">&quot;516&quot;</span> <span class="na">src=</span><span class="s">&quot;&lt;a href=&quot;</span><span class="na">http:</span><span class="err">//</span><span class="na">www</span><span class="err">.</span><span class="na">example</span><span class="err">.</span><span class="na">com</span><span class="err">/</span><span class="na">mysample</span><span class="err">.</span><span class="na">swf</span><span class="err">&quot;&quot;</span><span class="nt">&gt;</span>http://www.example.com/mysample.swf&quot;<span class="nt">&lt;/a&gt;</span> align=&quot;middle&quot; pluginspage=&quot;<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.macromedia.com/go/getflashplayer&quot;</span><span class="err">&quot;</span><span class="nt">&gt;</span>http://www.macromedia.com/go/getflashplayer&quot;<span class="nt">&lt;/a&gt;</span> flashvars=&quot;name=value&quot; quality=&quot;high&quot; bgcolor=&quot;#424242&quot; wmode=&quot;transparent&quot; allowscriptaccess=&quot;sameDomain&quot; allowfullscreen=&quot;true&quot; name=&quot;flv&quot;&gt;<span class="nt">&lt;/embed&gt;</span>
</span><span class='line'> <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;movie&quot;</span> <span class="na">value=</span><span class="s">&quot;&lt;a href=&quot;</span><span class="na">http:</span><span class="err">//</span><span class="na">www</span><span class="err">.</span><span class="na">example</span><span class="err">.</span><span class="na">com</span><span class="err">/</span><span class="na">mysample</span><span class="err">.</span><span class="na">swf</span><span class="err">?</span><span class="na">name=</span><span class="s">value&quot;&quot;</span><span class="nt">&gt;</span>http://www.example.com/mysample.swf?name=value&quot;<span class="nt">&lt;/a&gt;</span> /&gt;
</span><span class='line'><span class="nt">&lt;/object&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
